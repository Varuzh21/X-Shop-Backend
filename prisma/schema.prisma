// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  fullName         String
  email            String             @unique
  password         String
  stripeCustomerId String?
  role             Role               @default(CUSTOMER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cards            Card[]
  cart             Cart[]
  orders           Order[]
  Review           Review[]
  addresses        Address[]
  wishlist         Wishlist[]
}

model Card {
  id             Int      @id @default(autoincrement())
  userId         Int
  cardNumber     String   @db.VarChar(255)
  expiryDate     String
  expiryMonth    Int
  expiryYear     Int
  cvv            String
  billingAddress String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  ADMIN
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  size        String
  rating      Float
  price       Float
  stock       Int
  categoryId  Int
  thumbnail   String
  category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  like        Boolean     @default(false)
  cart        Cart[]
  reviews     Review[]
  wishlist    Wishlist[]
  OrderItem   OrderItem[]
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}


model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  total      Float
  status     OrderStatus @default(PENDING)
  payment    Payment?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  order     Order         @relation(fields: [orderId], references: [id])
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
